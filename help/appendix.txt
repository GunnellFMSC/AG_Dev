HTOPIC fileS "Suppose Files" file stand tree_data
\fbSuppose Files\f0

Organization of files used by Suppose:

\pFigures/files.bmp\p
\a

\i20.- 	\llocationsFile:Locations file\l defines the locations, 
contains a reference to corresponding stand list files, and defines
grouping codes and corresponding addfiles common to all locations.
This file can be edited using the 
\lEDITLOCSWindow:Edit Locations File\l window. 
\a

\i20.- 	\lstandlistFile:Stand List Files\l contain the list of
\bavailStanD:available stands\b for each location.  A stand list file
can be edited using the \lEDITSLFWindow:Edit Stand List File\l window.
\a

\i20.-	System files include the Suppose help and the XResources file
(on Motif).

\i20.- 	\lparametersFile:Parameters file\l contains data used to
customize Suppose for \bvarianT:variants\b and contains most of the
data Suppose uses to create \bkeywordS:keyword\b entry screens.  
\a

\i20.- 	\bsimfilE:Simulation file\b is both the major output of Suppose
and the major input to FVS.  It contains FVS keywords and data Suppose
uses when making changes to the file.  
\a

\i20.- 	FVS directly reads \lFVSTREEDATA:tree-level inventory data\l 
that represent the trees in the stand.  This file can be created or 
edited using the \lEDITFVSTWindow:Edit FVS Tree Data File\l window.  
Suppose does not read this data for any other purpose except to edit
it with this window.

\i20.- 	FVS output files are the reports generated by FVS.  Suppose
can scan these files to produce \lGENERATEReports:reports\l and 
\lGENERATEGraphs:graphs\l of some of the data they contain. (This is
not true for runs produced by the PPE, see \lPPESupporT:PPE Support\l
for more information.

See \lfileNameS:Suppose and FVS File Names\l for a description of the
file naming convention and file suffix designations. 

HTOPIC fileNameS "Suppose and FVS File Names" file stand name suffix
\fbSuppose and FVS File Names\f0

\llocationsFile:Locations file\l may have any name but usually have the
suffix \fc.loc\f0 by convention.

\lstandlistFile:Stand List files\l may have any name but usually have
the suffix \fc.slf\f0 by convention.

\lparametersFile:Parameters file:\l may have any name but is usually
called \fcsuppose.prm\f0 by convention.

\bsimfilE:Simulation file\b which is also the FVS keyword file may 
have any name as a prefix but must carry the suffix \fc.key\f0.

\bcomponenT:A file of components\b, sometimes called an
\baddfilE:Addfile\b as the suffix \fc.kcp\f0.

\lFVSTREEDATA:FVS Tree data\l files may have any name but usually
have the suffix \fc.fvs\f0.

On Windows, the run file, or batch file, always has the same prefix
name as the simulation file and carries the suffix \fc.bat\f0.

On Unix, the run file, or script file, always has the same prefix name
as the simulation file and carries the suffix \fc.sh\f0.

FVS main output file always has the same prefix name as the simulation
file and carries the suffix \fc.out\f0.

FVS tree list output file always has same prefix name as the simulation
file and carries the suffix \fc.trl\f0.

FVS summary output file always has same prefix name as the simulation
file and carries the suffix \fc.sum\f0.

FVS CHEAPO and calibrations output file always has the same prefix name as
the simulation file and carries the suffix \fc.chp\f0.  

HTOPIC locationsFile "Locations File" location stand file
\fbLocations File\f0

The file name of the locations file is usually \fcsuppose.loc\f0.  It
contains two kinds of records.  First, there is one type A record for
each location.  Each location refers to a list of stands.  Each stand 
is further defined via entries in a different
file called the \lstandlistFile:stand list file\l, or SLF.  The name
of the \bSLf:SLF\b is one of the entries on the type A records in the 
\fcsuppose.loc\f0 file. 

The second kind of record, called type B, is used to specify group
codes and \baddfilE:addfiles\b applicable to all the stands at all 
the locations.  Addfiles identified on type B records are
automatically included in the \bsimfilE:simulation file\b for each
stand that is identified as being a member of the group.  Group
membership is defined on type C records of the 
\lstandlistFile:stand list file.\l

The locations file is coded \bfreeForm:free form\b.  It can be
edited using the \lEDITLOCSWindow:Edit Locations File\l window.

Here is a list of the data elements for type A records:

\i30.Field 1.	Record type, code an \fcA\f0

\i30.Field 2.	A location name, entered as a quoted string if it
contains blanks.  This string will be used in the Select Simulation
Stands window to provide a list of locations.  If an @ sign is
entered, the SLF file name will be used as the location name. 

\i30.Field 3.	\bSLf:SLF\b access method code, where:

\i30.	\fcSuppose\f0 signifies that the data that represents stands at
this location were created within Suppose or that the data were provided to
Suppose in format that FVS and Suppose can read. 

\i30.	\fcTransName\f0 is the name of a 
\ldataTranslators:data translator program\l that converts data from
its original format into a form that FVS and Suppose can read
directly.  It also creates an \bSLf:SLF\b for the location.

\i30.Field 4.	\bSLf:SLF\b file name. Code an @ sign if the access method 
does not require this name.

\i30.Field 5.	Mapfile type identifier.  Code an @ symbol because this
file is not used in Version 1.

\i30.Field 6.	Name for the map file.  Code an @ symbol because this
file is not used in Version 1.

Here is a list of the data elements for type B records:

\i30.Field 1.	Record type.  Always code \fcB\f0.

\i30.Field 2.	Grouping Code.  May not contain blanks.

\i30.Field 3.	Name of the first addfile.  This file will be inserted into the
simulation file as one or more components \bcomponenT:component\b.

\i30.Field 4.	Name of the second addfile.

\i30.Field n+2.	Name of the nth addfile.

\i30.Field n+3.	@ sign signaling the end of the addfiles.

HTOPIC dataTranslators "Data Translator ProgramsQ" translator stand_list file tree_data
\fbData Translator Program\f0

\btranslatoR:Translator\b programs are not directly supported from within
Version 1.  They are run from outside Suppose to create FVS- and
Suppose-ready data.  

Suppose will provide for translators using these methods:

\i20.1.	The data provided Suppose can be ready for Suppose to directly
read and thereby not need any translation.  This is the same as
running the translators outside Suppose as a separate data preparation
step.  You code \f1suppose\f0 as the SLF access method in field 2 of
the \llocationsFile:locations file\l data records.

\i20.2.	The name of a translator program may be specified for each
location and you can cause the translator to run when the location is
accessed by Suppose.

When translator programs are run from Suppose, Suppose issues a command
to the computer system you are using.  That command will have the
following format:

\n
\i20.	\fcTransName field2 field3 field4 field5 field6 current-variant-id\f0
\w

where each of the fields (2 through 6) are elements of the
corresponding type A data records and the current-variant-id is the
2 character \bvarianT:variant\b identification you have selected from
within Suppose (or your default variant).

HTOPIC standlistFile "Stand List Files" translator stand file location
\fbStand List File\f0

The \bSLf:stand list file\b contains one entry for each stand at a 
\blocatioN:location\b.  All the locations are listed in the 
\llocationsFile:locations file\l.  

The records in this file are coded \bfreeForm:free form\b.  There are
4 record types named A, B, C, and D.  Record types A and B are
required entries for each stand and C and D are optional.  A stand list file
can be edited using the \lEDITSLFWindow:Edit Stand List File\l window.

\fbRecord Type A\f0

\i30.Field 1.	Record type, code an \fcA\f0

\i30.Field 2.	Stand Identification code.  Limited to 26 characters.

\i30.Field 3.	\lFVSTREEDATA:FVS Tree Data\l file fame.  
This file name will be used within FVS to directly read the data.  

\i30.	 If your tree data spans more than one file, you may code more
than one name, each separated by exactly one plus (+) sign.  Say, for
example, you have your tree data in two files named \fctrees1.fvs\f0
and \fctree2.fvs\f0.  To cause both files to be read for the stand,
code: \fctrees1.fvs+trees2.fvs\f0.

\i30.Field 4. 	Sample point site data flag, where \fcWithPointData\f0
indicates that the sample point site data is present in the tree data
and \fcNoPointData\f0 indicates otherwise.  The sample point site data
are point measures of slope, aspect, habitat type, topographic
position, and site preparation.  Note that the character \fc1\f0 is
equivalent to \fcWithPointData\f0 and any other character string is
equivalent to \fcNoPointData\f0.

\i30.Field 5. 	Variants to which the site and tree data apply.  This
field is actually a list of 2 character \bvarianT:variant\b
identifiers (always in lower case).  The list is ended with an @ symbol.

\fbRecord Type B\f0

Note regarding units of measure: Where units of measure are important,
the units applicable to the FVS \bvarianT:variant\b in question should
be used.  You must consult the FVS variant documentation to resolve questions
of measurement units.

\i30.Field 1.	Record type, code a \fcB\f0

\i30.Field 2.	Stand Identification code.  Limited to 26 characters
and must be identical to that used in record type A.

\i30.Field 3.	Inventory year

\i30.Field 4.	Latitude in degrees.

\i30.Field 5.	Longitude in degrees (not used in Version 1).

\i30.Field 6.	Location Code, usually the USFS Region and Forest Code.

\i30.Field 7.	Habitat type or Plant Association

\i30.Field 8.	Stand Origin Year

\i30.Field 9.	Aspect degrees

\i30.Field 10.	Slope percent

\i30.Field 11.	Elevation (In the US, this metric is usually 100's
feet.  It is in feet for the Southeast Alaska variant and some
variants used in the southeast United States.  Elevation is in meters
in metric variants).

\i30.Field 12.	Basal area factor.

\i30.Field 13.	Inverse of fixed plot size in acres or ha.

\i30.Field 14.	Breakpoint DBH in inches or cm

\i30.Field 15.	Number of plots

\i30.Field 16.	Number of non-stockable plots

\i30.Field 17.	Stand sampling weight (or size) used to compute weighted
average yield tables and other weighted averages among some set of stands.

\i30.Field 18.	Stockable percent

\i30.Field 19.	Diameter growth translation code as defined for FVS

\i30.Field 20.	Diameter growth measurement period

\i30.Field 21.	Height growth translation code as defined for FVS

\i30.Field 22.	Height growth measurement period

\i30.Field 23.	Mortality measurement period

\i30.Field 24.	Maximum Basal Area

\i30.Field 25.	Maximum Stand Density Index

\i30.Field 26.	Site Species

\i30.Field 27.	Site Index.

\i30.Field 28.	Model type code.

\i30.Field 29.	Physiographic region code.

\i30.Field 30.	Forest type code.

\i30.Field 31.	State code.

\i30.Field 32.	County code.

\fbRecord Type C\f0

\i30.Field 1.	Record type, code a \fcC\f0 (this record is optional and more
than one per stand may be used)

\i30.Field 2.	Stand Identification code.  Limited to 26 characters
and must be identical to that used in record type A.

\i30.Field 3.	\bgroupCode:Group code\b 1 (must not contain blanks).

\i30.Field 4.	Group code 2 (must not contain blanks).

\i30.Field n+2.	Group code n (must not contain blanks).

\i30.Field n+3.	@ symbol specifying the end of group codes for this record.

\fbRecord Type D\f0

\i30.Field 1.	Record type, code a \fcD\f0 (this record is optional and more
than one per stand may be used)

\i30.Field 2.	Stand Identification code.  Limited to 26 characters
and must be identical to that used in record type A.

\i30.Field 3.	\baddfilE:Addfile\b Data Set Name 1	

\i30.Field 4.	Addfile Data Set Name 2

\i30.Field n+2.	Addfile Data Set Name n

\i30.Field n+3.	@ symbol specifying the end of Addfile Data Set Names for this
record.

HTOPIC FVSTREEDATA "FVS Tree Data" tree_data stand file
\fbFVS Tree Data\f0

The FVS Tree Data can be viewed, edited, or both using the
\lEDITFVSTWindow:Edit FVS Tree Data File\l window.  

The contents of the tree data file are related to a stand by placing
the name of the tree data file in Field 3 of Type A
\lstandlistFile:stand list file\l records.  A stand list file can be
edited using the \lEDITSLFWindow:Edit Stand List File\l window.

Here is the format of the tree data records:

\i30.Plot ID (columns 1-4):	A 4-digit plot identification; no decimal
allowed.

\i30.Tree ID (columns 5-7):	A 3-digit tree identification; no decimal
allowed.  FVS reads the plot and tree ID fields together as the tree ID.

\i30.Tree count (columns 8-13):	A 6-digit real number is the number of
trees represented by this data record (also known as a tally); decimal
is allowed.

\i30.Tree history (column 14):	A 1-digit tree history code as follows: 0,
1, 2, 3, 4, or 5 are live trees. Code 6 or 7 trees died during mortality
observation period; code 8 or 9 died prior to mortality observation
period.

\i30.Species (columns 15-17):	A 3-character, left justified, species
identification code.  The codes are different for each FVS variant.

\i30.DBH (columns 18-21):	A 4-digit real number is the DBH in inches
(metric variants code this value in cm).  If NO decimal is coded, the
value is interpreted as being in tenths of inches.

\i30.DBH Growth (columns 22-24):	A 3-digit real number is the 
DBH in inches (metric variants code this value in cm).  If NO decimal 
is coded, the value is interpreted as being in tenths of inches (or cm).

\i30.Height (columns 25-27):	A 3-digit real number is the tree height in
feet (meters).

\i30.Height to topkill (columns 28-30):	A 3-digit real number is the tree
height to the point of top kill in feet (decimeters).  This value is
only used if there is a tree damage code of 96 or 97 coded for the tree.

\i30.Ht Growth (columns 31-34):	A 4-digit real number is the height growth in
feet (meters).  If NO decimal is coded, the value is interpreted as
being in tenths of feet (or decimeters).

\i30.Crown ratio (columns 35):	A 1-digit number is the crown ratio code, as
follows: 1=1-10%, 2=11-20%, 3=21-30%, 4=31-40%, 5=41-50%, 6=51-60%,
7=61-70%, 8=71=80%, 9=81-100%.

\i30.Damage code 1 (columns 36-37):	A 2-digit number is damage code 1 (of
3).  See below for a table of damage and severity codes.

\i30.Severity 1 (columns 38-39):	A 2-digit number is the
severity code that corresponds to the damage code.

\i30.Damage code 2 (columns 40-41):	A 2-digit number is damage 
code 2 (of 3).
  
\i30.Severity 2 (columns 42-43):	A 2-digit number is the
severity code that corresponds to the damage code.

\i30.Damage code 3 (columns 44-45):	A 2-digit number is damage
code 3 (of 3).  

\i30.Severity 3 (columns 46-47):	A 2-digit number is the
severity code that corresponds to the damage code.

\i30.	\fbDamage and severity coding:\f0

\i30.	Damage code 96=broken top and 97=dead top (no severity code is
used). The point of broken top or top kill is coded in columns 28-30. 

\i30.	Damage codes 61=Armillaria, 62=Phelinnus, 64=Annosus use these
severity codes: 1=there is a tree within 30 feet that has a
deteriorating crown or is killed by the disease; 2=the pathogen or a
diagnostic symtom is detected; and 3=crown deterioration observed.

\i30.	Damage code 2=mountain pine beetle attack uses these severity codes:
1=unsuccessful bole attack (pitchout), 2=strip attack, 3=successful
bole attack, 4=topkill.

\i30.	Damage code 3=Douglas-fir beetle attack uses these severity codes:
1=unsuccessful bole attack (pitchout), 2=strip attack, 3=successful
bole attack, 4=topkill.

\i30.	Damage code 30=dwarf mistletoe in some species, 31=mistletoe
in lodgepole pine, 32=mistletoe in larch, 33=mistletoe in Douglas fir,
and 34=mistletoe in ponderosa pine.  Use the Hawksworth rating (0-6)
for severty.

\i30.Tree value class (columns 48):	A 1-digit number is the tree
value cod were 1=desirable tree, 2=acceptable tree, and 3=live cull.
You can code an 8 to indicate that the plot is non-stockable and all
other values are interpreted as 3.

\i30.Prescription code (columns 49):	A 1-digit prescription code
where 1 or 0 is leave and other values mark the tree for removal.

\i30.Plot slope (columns 50-51):	A 2-digit slope in percent.

\i30.Plot aspect (columns 52-54):	A 3-digit aspect in degrees.

\i30.Plot habitat/PA (columns 55-57):	A 3-digit plot habitat code.  If plant
association is coded, an index value must be used.

\i30.Plot topo code (column 58):	A 1-digit code is the plot topographic
position, where 1=bottom, 2=lower, 3=mid-slope, 4=upper slope, and 5=
ridgetop. 

\i30.Plot site prep (column 59):	A 1-digit site preparation
code where 1=none, 2=mechanical, 3=burn, and 4=road cuts, road fills,
and other stockable road beds.

HTOPIC parametersFile "Parameters File" parameters

\fbSuppose Parameter File\f0

The parameters file is usually called suppose.prm and is stored with
the Suppose system files.  Users can modify this file and/or use
custom versions of the file for unique purposes.  However, Suppose
assumes this file is correct and the error messages you encounter when
it is wrong are not always helpful.  You can cause Suppose to used a
special version of this file using a \lcommandLine:command line\l
argument.  

The following topics are directly related to the parameters file.

\n
\lpFformat:Parameters File Format\l
\lpFmstext:MSText Format\l
\lpFapplications:Parameters File Applications\l
	\lpFaVariants:Variants\l
	\lpFaExtensions:Extensions\l
	\lpFaPrograms:Programs\l
	\lpFaCommands:Commands\l
	\lpFaSpecies:Species\l
	\lpFaForests:Forests\l
	\lpFaHabitat:Habitat Types and Plant Associations\l
	\lpFaKeyCats:Keyword Categories\l
	\lpFaKeyLists:Keyword List\l
	\lpFaKDefs:FVS Keyword Definitions\l
	\lpFaGPKey:The General Purpose Screen Builder (GPSB)\l
		\lpFaGPKeys:GPSB-PKeys\l
		\lpFaGPKeyFields:GPSB-Field Graphical Elements\l
		\lpFaGPKeyAnswer:GPSB-answerForm and parmsForm\l
	\lpFaCondLists:Conditions List\l
	\lpFaEventMonitor:Event Monitor Variables and Functions\l
	\lpFaTutorial:Tutorial Datasets\l
	\lpFaRunWizard:Run Wizard Tasks\l

\w

HTOPIC pFformat "Parameters File Format" parameter
\fbParameters File Format\f0
\a

The parameter file is composed of major sections called
\bmstexT:MSText\b.  The sections each have a unique, case-sensitive,
name called the major section name (\bmsnamE:MSName\b).  The text
inside the major section is easy to segregate from the markers that
define the beginning and end of each MSText.  A typical parameter file
will look like this:

\n
\fc//start msname.one

[the contents of one MSText]

//end msname.one

//start msname.two

[the contents of one MSText]

//end msname.two
\f0
\w

The syntax for the parameters file is illustrated in this figure:

\pFigures/pfile.bmp\p

Notes:

\i20.1.	All commands must start in the first character of a line.

\i20.2.	Major section markers are the \fc//start\f0 and \fc//end\f0 commands.
Only MSText may exist between \fc//start\f0 and \fc//end\f0 commands.

\i20.3.	The comment command is \fc//\f0 followed by a blank, then a string.
Comments may not exist within the major section text; that is,
not between the \fc//start\f0 and \fc//end\f0 commands.

\i20.4.	The file name in \fc//include\f0 must contain a full path name.
The include command may not be placed within the major section text; that is,
not between the \fc//start\f0 and \fc//end\f0 commands.

\i20.5.	The \fc//include\f0 command is NOT supported in Version 1.

HTOPIC pFmstext "MSText Format" parameters MSText
\fbMSText Format\f0

MSText is a body of text that is composed of a collection of objects
called \bpkeydatA:PKeyData\b.  \bpkeydatA:PKeyData\b objects are
identified by PKeys and contain character data called PStrings.  A
\bpkeY:PKey\b can be tagged with a list called an applies-to-list
(\batlisT:ATList\b).  This list usually contains the variants to which
the \bpkeydatA:PKeyData\b applies.

For example, you might use a PKeyData object to carry the defaults for
the first field on a keyword.  Let the \bpkeY:PKey\b be \fcf1\f0.  If
the default for one set of variants differs from the default for
another, you could have two PKeys both called \fcf1\f0.  To designate
which "applies-to" the sets of variants, you would provide each
\bpkeydatA:PKeyData\b object with a different \batlisT:ATList\b.  As
you will discover, the elements of \bpkeydatA:PKeyData\b are used in
various ways to achieve the goals of each MSText.  \a

See \lpFapplications:Parameters File Applications\l for information on
how the capabilities listed here are used.  
\a

The syntax for the MSText is illustrated in this figure:

\pFigures/mstext.bmp\p

\i20.1.	A \f1single-line-comment\f0 is any string contained on one line.

\i20.2.	A \f1single-token-string\f0 is any string that does not contain
blanks, commas, tabs, or either of the following two
characters: \fc{ }\f0

\i20.3.	A \f1multi-token-string\f0 is any string.  The string may
contain any character, however these three characters: \fc{ } \\\f0
must be preceded with the \fc\\\f0 character if they are part of
\f1multi-token-string\f0.  The new line character may also be preceded
with \fc\\\f0 to signify that the string data on the following line
are part of the current line.  The sequence \fc\\n\f0 signifies that
there is a logical newline specified inside the string.  The sequence
\fc\\t\f0 signifies a tab character in the string.  MSText may not
contain \fc//\f0 as the first two characters of a record; use
\fc\\//\f0 to signify \fc//\f0 in these cases.

\i20.4.	An \batlisT:ATList\b is a list of identifiers that signify which of
several identical PKeys applies in a given situation.  An example of
identifications are variant identifications where ni is north Idaho,
ci is central Idaho, and so on.  Another example is operating system
identifications like UNIX, Windows, OS2 and so on.  The definition of
an \batlisT:ATList\b depends on the details of a \bpkeY:PKey\b definition.

Example:

Here is a portion of a parameters file that illustrates the use of the
MSText markers (\fc//start\f0 and \fc//end\f0) and the MSText
contents.  This section provides support of the FVS Growth keyword
including all of the variant specific defaults.  See the
\lpFaGPKey:General Purpose Screen Builder\l for a description of the
elements of used in this example.

\fc\n
//start keyword.base.Growth

description:
{Identify the methods used to measure and input mortality, height
and diameter growth data.

Growth estimates can be either directly measured or computed as
the difference between two successive diameter or height
measurements.  Furthermore, the values for DBH and HT can
describe the tree at either the start of the end of the growth
period.}

f1:{longListButton Diameter growth measurement method}
f1v:{Measured directly, end of growth period
     Subtract end of period from beginning
     Measured directly, start of growth period
     Subtract beginning from end of growth period}

f2:{numberBox Length of diameter growth measurement period in
years} 
f2v{nc}:{5}
f2v:{10}

f3:{longListButton Height growth measured}
f3v=f1v

f4:{intNumberBox Length of height growth measurement period in years}
f4v:{5}

f5:{intNumberBox Length of the mortality observation period}
f5v:{5}

//end keyword.base.Growth
\f0 \w

A description of each element of this example awaits the detailed
presentation of using the parameter file to define attributes of
keywords.

HTOPIC pFapplications "Parameters File Applications" parameter
\fbParameters File Applications\f0

The parameter file is used to define many attributes of a Suppose
installation.  Each attribute uses the basic syntax of MSText in
its own way to achieve the desired goals.  The following sections
describe the current uses of suppose.loc.   Examples are given to
illustrate these uses.  Do not consider these examples complete.
A current listing of the up-to-date parameters file is the sole
source of the state-of-the-art regarding the file's contents.
\n

\lpFaVariants:Variants\l
\lpFaExtensions:Extensions\l
\lpFaPrograms:Programs\l
\lpFaCommands:Commands\l
\lpFaSpecies:Species\l
\lpFaForests:Forests\l
\lpFaHabitat:Habitat Types and Plant Associations\l
\lpFaKeyCats:Keyword Categories\l
\lpFaKeyLists:Keyword List\l
\lpFaKDefs:FVS Keyword Definitions\l
\lpFaGPKey:The General Purpose Screen Builder (GPSB)\l
	\lpFaGPKeys:GPSB-PKeys\l
	\lpFaGPKeyFields:GPSB-Field Graphical Elements\l
	\lpFaGPKeyAnswer:GPSB-answerForm and parmsForm\l
\lpFaCondLists:Conditions List\l
\lpFaEventMonitor:Event Monitor Variables and Functions\l
\w


HTOPIC pFaVariants "Variants" parameter variant
\fbVariants\f0

\bvarianT:Variants\b are identified by an abbreviation and a formal
name.  For example, the abbreviation ni signifies the Inland Empire
variant.  In the parameters file, there is one MSText section that
lists all variants.  For each variant there is one \bpkeY:PKey\b that
specifies the abbreviation and the corresponding \bpstrinG:PString\b
is used to specify the formal name.  Formal names are used in menus
used to select the variant and in messages concerning the variant.
The abbreviation is used to identify variants inside Suppose.
Generally, Suppose user's don't need to know abbreviations, but they
do need to know the formal names.  The variant abbreviations and the
\lpFaExtensions:extension\l abbreviations must be different from each
other.

Here is a partial entry for suppose.prm for defining variants:

\n\fc
//start variants

! The \bpkeY:PKey\b is the variant abbreviation, the \bpstrinG:PString\b is the name.

ak:     {Southeast AK - Coastal BC}
bm:     {Blue Mountains, Oregon}
ci:     {Central ID}

//end variants
\w\f0

HTOPIC pFaExtensions "Extensions" parameter extension
\fbExtensions\f0

\bextenS:Extensions\b are identified by an abbreviation and a formal
name.  The abbreviation is coded as a \bpkeY:PKey\b and the
corresponding \bpstrinG:PString\b is used to specify the formal
name. Generally, Suppose user's don't need to know abbreviations, but
they do need to know the formal names.  The \lpFaVariants:variant\l
abbreviations and the extension abbreviations must be different from
each other.

Here is a partial entry for the \bmstexT:MSText\b section for defining
extensions:

\n\fc
//start extensions

! The \bpkeY:PKey\b is the extension abbreviation, the \bpstrinG:PString\b is the name.

base:{Base FVS system}
estb:{Full Establishment Model}
strp:{Partial Establishment Model}
cover:{Cover Model}

//end extensions
\w\f0

\fbExtensions Prefixes\f0

When Suppose creates the \bsimfilE:simulation file\b it automatically
adds one or more keywords that signal to FVS that a keyword specific
to the extension follow in the run.  An example is the \fcEstab\f0
keyword that is associated with the Establishment Model
extension. This keyword is required to be in the run prior to any
keywords specific to the Establishment Model.  Suppose automatically
builds this these keywords according to the specifications in the
following \bmstexT:MSText\b section (a partial listing is shown):

\n\fc
//start extensPrefixes

estb   : Estab
strp   : Estab
cover  : Cover
fire   : FMIn
mist   : Mistoe
ard    : ANIn
armwrd3:{RDIn\nRRType             3}
phewrd3:{RDIn\nRRType             4}
wpbr   : BRust

//end extensPrefixes
\w\f0

HTOPIC pFaPrograms "Programs" parameter program
\fbPrograms\f0

Suppose must know which \bFVs:FVS\b \bprograM:programs\b exist, which
\bvarianT:variant\b each contains, and which \bextenS:extensions\b
each contains.  Suppose assumes that FVS programs always contain
compatible extensions.

The specification of a program is done using the \bpkeY:PKey\b and
\batlisT:ATList\b.  The \bpstrinG:PString\b is left empty.  The
\bpkeY:PKey\b is the program name and the \batlisT:ATList\b contains
the variant abbreviation followed by abbreviations for all of the
extensions the program contains.  Program names are used by Suppose in
picking the command (see the following section) needed to run the
program and may be placed in the command string.

\n\fc
//start programs

ni6    {ni estb cover}      :{}
kt6    {kt estb cover}      :{}
ci6    {ci estb cover}      :{}
so6    {so strp}            :{}

//end   programs
\w\f0

HTOPIC pFaCommands "Commands" parameter command
\fbCommands\f0

An FVS \bprograM:program\b is available to the Suppose user only if
Suppose knows a \bcommanD:command\b useful to execute the 
\lpFaPrograms:program\l.  The commands are operating system dependent.
System administrators may modify this section of suppose.prm to
customize the commands used at a given site.

Each entry in the command \bmstexT:MSText\b section uses the same
\bpkeY:PKey\b: \fccommand\f0.

The \batlisT:ATList\b for each command contains any of the following
tokens:

\i40.\fcppe\f0	if the FVS program contains the \bppE:PPE\b extension

\i40.\fcdos\f0	if the operating system is MS-Windows.

\i40.\fcunix\f0	if the operating system is Unix.

The \bpstrinG:PString\b is the command string.  The command string may
contain one of the following tokens that indicate a substitution is
made when Suppose actually forms the command.

\i30.\fc!program!\f0	is converted to the program name Suppose picks to
run the simulation (Suppose chooses the program by picking one that
contains the variant and required extensions needed to make the
simulation).

\i30.\fc!run!\f0	is converted to the file name of the simulation file.  
\n\fc
//start commands

command{dos}:{runfvs !program! !run!}

command{unix}:{/local/bin/rr !program! !run!}
command{ppe unix}:{/local/bin/rrp !program! !run!}

//end   commands
\w\f0

HTOPIC pFaSpecies "Species" parameter species
\fbSpecies\f0

Each \bvarianT:variant\b supports a unique species list.  There is a
\bmstexT:MSText\b section for each list.  The \bmsnamE:MSName\b is formed by
adding the variant abbreviation to the end of the string:
\fcspecies_\f0.  For example \fcspecies_ni\f0 is the MSName for the
Inland Empire variant.

Species are known by an alphabetic abbreviation (the \bpkeY:PKey\b), a
number (the \batlisT:ATList\b) , and a common name (the
\bpstrinG:PString\b).  Here is the species list for variant tt
(Tetons).  It is used to illustrate that not all of the integers
between 1 and 11 (or 1 and the maximum number of species) are used in
all variants.  Note that species 4, 5, and 10 are not used in the tt
variant.  
\n\fc 

//start species_tt

WB{1}:{White bark pine}
LM{2}:{Limber pine}
DF{3}:{Douglas fir}
AS{6}:{Aspen}
LP{7}:{Lodgepole pine}
ES{8}:{Englemann spruce}
AF{9}:{Alpine fir}
Oth{11}:{Other species}

//end  species_tt
\w\f0

HTOPIC pFaForests "Forests" parameter forest
\fbForests\f0

Each \bvarianT:variant\b contains a unique list of forests.  The
\bmsnamE:MSName\b is used to specify the forest list for each
\bvarianT:variant\b.  It is formed by adding the variant abbreviation
to the end of the string Forest_.  For example, Forest_ni is used to
identify the MSText defining the Inland Empire variant's forest list.

The \bpkeY:PKey\b is the forest number and the \bpstrinG:PString\b is
the forest name.

\n\fc
//start Forests_ni

  103:{Bitterroot}
  104:{Idaho Panhandle}
  105:{Clearwater}
  110:{Flathead}
  114:{Kootenai}
  116:{Lolo}
  117:{Nez Perce}
  621:{Colville}
  106:{Coeur d'Alene}
  113:{Kaniksu}
  118:{St. Joe}

//end   Forests_ni
\w\f0

HTOPIC pFaHabitat "Habitat Types and Plant Associations" parameter habitat_types plant_association
\fbHabitat Types and Plant Associations\f0

For \bvarianT:variants\b that use habitat types or plant associations,
suppose.prm contains \bmstexT:MSText\b that lists the possible types.
Both are known by numeric identifiers (the \bpkeY:PKey\b) and by name (the
\bpstrinG:PString\b).  The MSName is formed by adding the variant
abbreviation to the string HabPa_.

Here is a partial list for the ni variant.
\n\fc

//start HabPa_ni

130:{PIPO AGSP}
170:{PIPO SYAL}
250:{PSME VACA}
260:{PSME PHMA}
280:{PSME VAGL}
290:{PSME LIBO}
310:{PSME SYAL}
320:{PSME CARU}
! many lines have been deleted from the real HabPa_ni entry.
999:{OTHER}

//end   HabPa_ni
\w\f0

HTOPIC pFaKeyCats "Keyword Categories" parameter keyword categories
\fbKeyword Categories\f0

FVS Keywords are presented in a \lpFaKeyLists:keyword list\l.  The
list is divided into categories.  The first category defines the
extension to which the keyword belongs.  A keyword is only uniquely
identified when the extension to which it belongs is also identified
(this is an FVS fact and therefore a requirement within Suppose).

Secondly, keywords are placed into categories.  The categories are
used to help you find the keyword you are looking for.  An implied
category is All, which indicates all of the keywords within an
extension.  Keywords that are part of the base model are listed as
such, that is, as part of "base".

The \bpkeY:PKey\b is used to define an abbreviation for each category.
The abbreviations are used within Suppose, user's never see them.  The
category names are fully defined using the \bpstrinG:PString\b.  Note
that category abbreviations and extension abbreviations must be
different from each other.

Here is the category \bmstexT:MSText\b:
\n\fc
//start keyword_categories

! The category abbreviation is the \bpkeY:PKey\b and the \bpstrinG:PString\b
! category description.

! Category     Description
! ---------    -------------------------
 calib:       {Model Calibration Control}
 canopy:      {Canopy Options}
 control:     {Program Control}
 inventory:   {Tree, Plot, Stand Inventory}
 io:          {Input/Output Controls}
 modifier:    {Modify Predictions}
 regen:       {Regeneration Establishment}
 silv:        {Silviculture}
 stdtre:      {Stand and Tree Information}
 thin:        {Thinning and Harvesting}
 understory:  {Understory Options}
 vol:         {Volume Calculation Controls}

//end keyword_categories
\w\f0

HTOPIC pFaKeyLists "Keyword List" parameter keyword
\fbKeyword List\f0

There is one \bmstexT:MSText\b section that contains a list of all keywords.
The MSName is keyword_list.  Entries are as follows:

The \bpkeY:PKey\b is the FVS Keyword.

The \batlisT:ATList\b is contain a list that is made up of the
abbreviation for the \lpFaExtensions:extension\l to which the keyword is
a part and the abbreviation(s) for the \lpFaKeyCats:categories\l to
which the keyword is a member.  Keywords may be members of more than
one category but not more than one extension.  All keywords are
members of the category All by default.

The \bpstrinG:PString\b is a short description of what the keyword
does or represents.  It is displayed when the user selects the keyword
in the keyword selection window prior to accepting the selection.  It
is designed to aid the user in selecting the desired keyword.

Here is a partial listing of the \fckeyword_list\f0.
\n\fc
//start keyword_list

BAIMult   {base gromort modifier}:
{Multiplier to change the large tree basal area increment
prediction}

BAMax     {base gromort}:
{Modifies maximum density for the stand and the mortality
distribution pattern}

BFDefect  {base vol}:
{Specifies species specific board-foot volume defect corrections
for board foot volume estimates}

! many lines have been deleted from this example keyword list.

//end keyword_list
\w\f0

HTOPIC pFaKDefs "FVS Keyword Definitions" parameter keyword
\fbFVS Keyword Definitions\f0

Each keyword is defined in Suppose using its own \bmstexT:MSText\b.
The MSName is formed using the string \fckeyword\f0. followed by the
extension abbreviation (there is one exception to this rule that
concerns the use Establishment Model extension), followed by the FVS
keyword.  For example, for the Growth keyword in the base model, the
MSText name is \fckeyword.base.Growth\f0.  Note that the string is
case sensitive and that the string \fcGrowth\f0 is entered exactly as
it is in the \lpFaKeyLists:keyword list\l.

Elements of each keyword's input and the resulting keyword record are
defined to Suppose using a general purpose set of tools.  This set of
tools, called \lpFaGPKey:the general purpose screen builder (GPSB)\l,
is also used to define Event Monitor \lpFaCondLists:conditions\l,
\lpFaEventMonitor:variables, and functions\l.

The GPSB is not used for everything!  Keywords that don't use the GPSB
are supported by Suppose in custom windows, much like management
windows.  If the parameters file is needed to support these keywords,
the corresponding MSText is also custom and it has a custom
description.

See \lpFaGPKey:GPSB\l for a description of the screen builder.  See
your copy of suppose.prm to see examples of how the GPSB is used to
build the input screens to keywords.

HTOPIC pFaGPKey "The General Purpose Screen Builder (GPSB)" GPSB parameter keyword
\fbThe General Purpose Screen Builder (GPSB)\f0

\n
	\lpFaGPKeys:GPSB-PKeys\l
	\lpFaGPKeyFields:GPSB-Field Graphical Elements\l
	\lpFaGPKeyAnswer:GPSB-answerForm and parmsForm\l
\w

The General Purpose Screen Builder (GPSB) is used to define a set of
input fields, optional titles, descriptive information, and the form
of the output generated after the you specify the values for fields of
keywords or other input used in building a simulation file.

In defining the input fields, text that describes the input (like a
prompt), the default value and optional values are set.  Suppose uses
this information to build an input window, to provide error checking
of the selected inputs, and to convert the inputs from the various
fields into data used in building the simulation file.

Let's use the CutEff keyword (used to set the cutting efficiency in
FVS) as an example.  This keyword has one input field used to input
the cutting efficiency, a number between 0.1 and 1.  The FVS keyword
record is a column-specific string like this:

\n
\fc		CutEff         .9\f0
\w

If you select the CutEff keyword, Suppose looks for an
\bmstexT:MSText\b section called "keyword.base.CutEff".  There are
entries that describe this keyword's usage, the fact that there is
only one field, and a specification for the graphical mechanism used
to solicit input.  In our example case, Suppose knows there is only
one field because there is a \bpkeY:PKey\b \fcf1\f0 and no
\bpkeY:PKey\b \fcf2\f0.  Suppose knows a sliderBox (see
\lpFaGPKeyFields:GPSB-Field Graphical Elements\l) is used to solicit
the input because sliderBox is the first token in the
\bpstrinG:PString\b corresponding to \fcf1\f0.  Suppose gets the
default value from \fcf1v\f0.  The corresponding \bpstrinG:PString\b
is a set of values that define the field default, the minimum and
maximum acceptable values, and the minimum and maximum slider range.

\fc\n 
//start keyword.base.CutEff

f1:{sliderBox Proportion of sample trees to be removed}
f1v:{1.0 0.1 1.0 0.1 1.0}

description:
{Change the cutting efficiency for all thinnings. The
proportion of sample trees represented by a record
that is eliminated if a tree is designated for removal.

\f1several lines deleted from this example\fc

CutEff keyword will be used.}

//end keyword.base.CutEff
\w\f0

Given no information to the contrary, Suppose assumes that the value
for the \fcsliderBox\f0 is to be right justified in field 1 of a
standard keyword record.  The keyword will be in columns 1-6 in this
case.

As you can see, the job of changing, say the text for the prompt, or
the default value is simply done by modifying the MSText entry in
suppose.prm for this keyword with your standard text editor.

If specific variants should have a different default value, you
can add more f1v entries using an \batlisT:ATList\b for the additional
entries.  In this way, Suppose is customized to reflect the needs
of a specific variant.


HTOPIC pFaGPKeys "GPSB-PKeys" parameter keyword GPSB
\fbGPSB-PKeys\f0

\n
	\lpFaGPKeyFields:GPSB-Field Graphical Elements\l
	\lpFaGPKeyAnswer:GPSB-answerForm and parmsForm\l
\w

\bmstexT:MSText\b entries that support GPSB expect a specific set of
\bpkeY:PKeys\b.  Two general rules apply.  First, the order of the
PKeys in the MSText is not important to Suppose.

Second, \bpkeY:PKeys\b (all except \fcexpressionContents\f0 
and \fcppe\f0, see below) in an GPSB-compliant MSText may have an 
\batlisT:ATList\b.  The\batlisT:ATList\b contains the variants 
to which each \bpkeY:PKey\b applies.

For example, say we have these two definitions for \fc\f1v\f0: 

\n
\i20.	\fcf1v{ni ci}:1\f0
\i20.	\fcf1v{tt}:2\f0 
\w

When ni or ci is the variant, the default for field f1v is 1.  When tt
is the variant, the default is 2.  If variant bm were in use, then f1v
would not be defined.  To guard against this case, an instance of f1v
without an \batlisT:ATList\b is generally included in the
\bmstexT:MSTexts\b.  It would define the default value to use given
some variant other than ni, ci, or tt were used.

Here is a list of the \bpkeY:PKeys\b used in GPSB-compliant
MSTexts and a description of their corresponding
\bpstrinG:PStrings\b.

\fbdescription\f0 
\i20.	The \bpstrinG:PString\b is a description that
is displayed in the window after all of the fields are rendered.

\fbf1title (and f2title, f3title, ..., fntitle)\f0 
\i20.	These PKeys are called "field title" PKeys and are optional
companions to the primary "field" PKeys.  For example, f1 is used to
defined field 1 and f1title provides a corresponding optional
title.  The \bpstrinG:PString\b is a string used to present information
more extensive than expected in a prompt string.  Note that f1title is
ignored by Suppose if there is no f1, f2title is ignored if there is
no f2, and so on.

\fbf1 (and f2, f3, ..., fn)\f0
\i20.   The \bpstrinG:PString\b designates the kind of graphical elements
used for the field's input and the prompt string.  The kinds of
graphical elements are described in 
\lpFaGPKeyFields:GPSB-Field Graphical Elements\l.

\fbf1v (and f2v, f3v, ..., fnv)\f0
\i20.	The \bpstrinG:PString\b designates the default "field value" and
other data used in the field.  The format and contents of the
\bpstrinG:PString\b depend on the kind of graphical element coded in
the corresponding "field" PKey.  
See \lpFaGPKeyFields:GPSB-Field Graphical Elements\l.

\fbanswerForm\f0 
\i20.   The \bpstrinG:PString\b designates the form of
the output answer string.  This \bpkeY:PKey\b is optional.  When it is
missing, Suppose assumes it is a standard keyword record with up to 7
numeric fields, if desired.  When GPSB is used for specification of
elements other than keywords, the answerForm is a required entry.  See
\lpFaGPKeyAnswer:GPSB-answerForm and parmsForm\l.

\fbparmsForm\f0
\i20.   The \bpstrinG:PString\b designates the form of the answer string
if the PARMS feature is used.  There is no default.  The presence of
this PKey is the mechanism used to signify that the keyword supports
the PARMS feature. 
See \lpFaGPKeyAnswer:GPSB-answerForm and parmsForm\l for more information.

\fbdefaultCondition\f0
\i20.	This \bpkeY:PKey\b is used with Keywords (and some management screen
MSText sections) that can be scheduled by condition.  The \bpstrinG:PString\b
is the abbreviation of the default condition desired when the
keyword is used.  Possible choices are those specified in a
\lpFaCondLists:Condition List\l.

\fbexpressionContents\f0 
\i20.	Used only when parmsForm is used, the
\batlisT:ATList\b provides one or both of the following:

\i20.	\fcalways\f0 refers to all Event Monitor variables and functions
that are defined both prior to thinning and after thinning.

\i20.	\fcafter\f0 refers to Event Monitor variables and functions that
are defined only after thinning.

When the PARMS feature is used with a keyword, the user is placed in
an expression editor.  The \fcexpressionContents\f0 \bpkeY:PKey\b is
used to by the expression editor when it selects which variables and
functions to offer the user in its lists.  Note that the
\bpstrinG:PString\b is left empty.


\fbppe\f0 (also see: \lPPESupporT:PPE Support\l)  
\i20.	Used to specify the placement of the keyword within a 
\bppE:PPE\b run. If the keyword is not part of the PPE extension,
including this PKey implies that the PPE extension is needed and
desired.  The \batlisT:ATList\b is not used.  The \bpstrinG:PString\b
can be one of the following:

\i20.	\fctop\f0 places the keyword at the top of the run, prior to
all stands.

\i20.	\fcstand\f0 places the keyword at the stand level in the
\lCURRENTRadioGroup:current group or stand\l.

\i20.	\fcbottom\f0 places the keyword at the bottom of the run,
after all stands and prior to the \bppE:PPE's\b \fcProject\f0 keyword.

\i20.	\fcreport\f0 places the keyword at the after PPE's Project
keyword and prior to \fcSTOP\f0.

HTOPIC pFaGPKeyFields "GPSB-Field Graphical Elements" parameter keyword GPSB
\fbGPSB-Field Graphical Elements\f0

\n
	\lpFaGPKeys:GPSB-PKeys\l
	\lpFaGPKeyAnswer:GPSB-answerForm and parmsForm\l
\w

As described under \lpFaGPKeys:GPSB-PKeys\l one of several different
graphical elements can be used to solicit input from each field.  The
various elements are described below along with the specification for
the PKeys used to define the values of fields (a.k.a. value PKeys).

\fbnoInput\f0
\i20.	Signifies that there is no input for this field.  This graphical
element is usually used when the entire keyword requires no input.  For
example, the NoCalib keyword uses this form for f1.

\fbscheduleBox\f0
\i20.	Used with keywords that are scheduled by year or by condition.
The defaultCondition \bpkeY:PKey\b may be used in the MSText to
specify the name of the condition taken as the default for the keyword.
A value \bpkeY:PKey\b may be used to specify the default number of years
following the event when the keyword will be scheduled.

\n
\fbintNumberBox
numberBox\f0\w
\i20.	Both are similar, but the intNumberBox forces the answer be an
integer.  The prompt string is followed on the same line by a
text edit box that allows for numeric input.  The string found in
the text edit is considered the answer.  The corresponding value
PKey contains the default, the minimum value, then the maximum
value.  The symbol \fcFmax\f0 can be used to specify that the 
maximum acceptable value is the largest number that can be stored in
your computer.  The symbol \fcFmin\f0 can be used to specify that the 
minimum acceptable value is the smallest number that can be stored in
your computer.  

\n
\fbintSliderBox
sliderBox\f0\w
\i20.	Both are similar, but the intSliderBox forces the answer be an
integer.  This graphical element is a horizontal slider followed
by a text edit box.  The prompt string is placed above the
slider.  The value of the slider is displayed in the text edit
box.  If the user directly types in the text edit box, the slider
is automatically scrolled to a corresponding value.  If
necessary, the slider is rescaled to accommodate the user's
entry.

\i20.	The corresponding value \bpkeY:PKey\b is used to specify the
following, in order: the default, the minimum acceptable value, the
maximum acceptable value, the minimum slider value, and the maximum
slider value.  The symbol \fcFmax\f0 can be used to specify that the 
maximum acceptable value is the largest number that can be stored on
your computer.  The symbol \fcFmin\f0 can be used to specify that the 
maximum acceptable value is the smallest number that can be stored on
your computer.  Note that these symbols can not be used to specify
a sliderBox range.

\fbspeciesSelection\f0
\i20.	The species list for the variant is presented in a list button.
The list includes, as the first element the selection "All Species"
(unless otherwise specified).  Users pick the species and the
corresponding species abbreviation is placed in the field.  The
corresponding value \bpkeY:PKey\b is used to suppress the All Species
as a selectible item and/or to designate a species other than the
first in the list as the default.  

\i20.	For example, if \fcf2\f0 is a speciesSelection, then \fcf2v\f0 could
be {deleteAll LP} which means that the choice of All Species will not
be in the list and that LP (lodgepole pine) will be preset the
default.  If f2v:{LP} were coded, the default would be LP and All
Species would remain in the list.  If f2v is not coded, All Species
would be both in the list and the default.  If deleteAll is specified
without a default, then no default is picked and the corresponding
field on the keyword is left blank.

\fbhabPaSelection\f0
\i20.	Used to present a list button of the habitat types or plant
associations (as appropriate for the variant being used).  The
result is the corresponding numeric habitat or plant association
code.  The value \bpkeY:PKey\b can optionally be used to designate the
default.

\fbforestSelection\f0
\i20.	Used to present a list button of the National Forests that can be
used with the variant.  The result is the corresponding numeric
forest code.  The value \bpkeY:PKey\b can be used to designate the
default.

\n
\fblistButton
longListButton\f0\w
\i20.	Both are used to present a list button.  The user selects an item
from the list and the corresponding index value of the item is
used as the numeric value in the resulting keyword.  The first
item is numbered item zero, the second item is item 1, and so on. 
The items are taken from the contents of the \bpstrinG:PString\b
corresponding to the value PKey.  Each item in the list is one
line of text in the \bpstrinG:PString\b.  The default item is the first item
or the item where the first non-blank character of the line is
the > character.  For example, say we have f3:{listButton How do
you want your cake} for field 3.  We could have the following as
the value PKey:
\n\fc
\i20.	f3v:{With ice cream \\n With rum topping
\i20.	   > With ice cream and rum topping}
\w\f0
\i20.	This will yield a list button with three choices (note that the
\fc\\n\f0 sequence generates a new line in all \bpstrinG:PString\bs).
The default will be "With ice cream and rum topping".

\i20.	A listButton has the prompt string on the left hand side of the
window and the list button on the right hand side of the window.  A
longListButton has the prompt string that is as long as the window is
wide.  It is placed above the list button which also is as long as the
window is wide.  Otherwise these two graphical elements have identical
behavior.

\i20.	If numeric values other than 0, 1, ... and so on correspond to
the list elements, Suppose can map between these integer values
and other values using a mechanism defined under 
\lpFaGPKeyAnswer:GPSB-answerForm and parmsForm\l.

\n
\fblistButtonString
longlistButtonString\f0\w
\i20.	Like listButton and longListButton except that the first token
of the entry is used for the answer rather than the index number corresponding
to the selected item.  For example, you could use this capability to
represent special species list, for example: 
\n\fc
\i20.	f2:{listButtonString Select the grass species}

\i20.	f2v:{BG = Blue Grass \\n WG = Wheat Grass \\n PG = Pine Grass}
\w\f0 
\i20.	The list would contain the strings BG = Blue Grass, and so
on, but the answer would contain BG not the number 0 if the first item
were selected.

\n
\fblistEdit
longListEdit\f0\w
\i20.	Like listButton (and longListButton) except that the list
selection can be edited and the answer is the entire string, not
just the first token.  The loading of the list using the value
PKeys is the same as that described for the listButton.

\n\fb
textEdit
longTextEdit\f0\w
\i20.	These work like a number box except that the answer is a text
string of any kind.  The default string is the entire contents of
the \bpstrinG:PString\b that corresponds to the value PKey.  For example:
\fc\n

\i20.	f2:{longTextEdit Specify the subprograms for which \\
\i20.	you want debug output}
\i20.	f2v:{main tregro grincr gradd}
\f0\w

\n\fb
checkBox\f0\w
\i20.	This is used to define a state, checked or unchecked. The first 
token of the entry is the control title. The corresponding value \bpkeY:PKey\b 
is used to specify the initial checkBox state. The answer corresponds 
to the state of the control with 1 representing checked and 0 representing 
unchecked.  For example:
\fc\n

\i20.	f2:{checkBox Use Default Settings}
\i20.	f2v:{1}
\f0\w

\i20.	In this example, the checkBox is checked by default.

\n\fb
radioGroup\f0\w
\i20.	These are used to define a group of radio buttons upon where only
one selection is allowed. The first token of the entry is the group title. 
Operating much like a listButton, the item selected from the radio button
group and its corresponding index value will be used as the numeric value
in the resulting keyword.  The first radio button is numbered 0, the second
radio button is item 1, and so on.  The radio buttons are taken from the
contents of the \bpstrinG:PString\b corresponding to the value \bpkeY:PKey\b.  
Each radio button in the radio group is one line of text in the
\bpstrinG:PString\b.  The default selected radio button is the first
\bpstrinG:PString\b or the \bpstrinG:PString\b where the first non-blank
character of the line is the > character.  For example:
\fc\n

\i20.	f2:{radioGroup Select Iteration}
\i20.	f2v:{Daily
\i20.	     Weekly
\i20.	  >  Monthly
\i20.	     Yearly}
\f0\w

\i20.	In this example, Monthly is selected by default.

\n\fbfileBrowse\f0\w
\i20.	A text edit box followed by \f1Browse\f0 button that activates
a file selection diolog.  The file name selected using the diolog is
placed in the text edit box. The optional default file name is the 
entire contents of the \bpstrinG:PString\b that corresponds to the 
value PKey. The default file type is the file type of the default file
name. If no default file name and type are desired, leave out the
value PKey. No provision is made to specify only a default file
type. The file type is defined to be the up to 4 characters following
the last period in the default file name. If no default type is found,
"All (*.*) files" are used in the dialog filter. For example:
\fc\n

\i20.	f6:{fileBrowse Enter the file name:} 
\i20.	f6v:{theInput.txt}
\f0\w

\i20.	In this example, the default file name is \fctheInput.txt\f0
and the default file type used in the diolog is \fctxt\f0. 

HTOPIC pFaGPKeyAnswer "GPSB-answerForm and parmsForm" parameter keyword GPSB
\fbGPSB-answerForm and parmsForm\f0

\n
	\lpFaGPKeys:GPSB-PKeys\l
	\lpFaGPKeyFields:GPSB-Field Graphical Elements\l
\w

When you are finished making selections on a keyword window (or
another window that uses the GPSB facility), Suppose reads the 
answers from the graphical elements and builds a keyword record or
other answer string, as necessary.  The form of the answer string is
defined using the answerForm or parmsForm PKeys.

The default answer from for keywords is:
\n\fc
Keyword   !1,10!!2,10!!3,10!!4,10!!5,10!!6,10!!7,10!
\f0\w

When Suppose builds an answer string using this form, it converts
the string \fcKeyword\f0 to the name of the keyword and each "field
definition" to the numeric (or character) string that belongs in
the field.  

Field definitions start and end with \fc!\f0 chars.  The location of
the first \fc!\f0 character defines the beginning of the field on the
keyword record (only when the first character that follows the \fc!\f0
is a number, see the handling of \fc!fvsbin!\f0, described below).  The
field number is the first value, the field width is the second value
within the field definition.  So, in the default answerForm, we have 7
field definitions starting in the 11th column, and each are 10 columns
wide.  The answers are right justified in the fields.  Leading blanks
are stripped from the answer unless the field width is coded as a
negative number.  When that is the case, any leading blanks are kept
as part of the string.  The field width is optional, when it is
missing the length of the answer string defines the field width.

The default answer form sometimes does not provide what is
needed.  For example, the CutList keyword uses this answer form
\n\fc
answerForm:{CutList   !1,10!!2,10!!3,10!
!4,10!}
\f0\w

because keyword fields 4 and 5 are not used.  Remember, Suppose
stops processing fields (none can be missing) if a corresponding
field \bpkeY:PKey\b is missing.  The solution is to place "field
definition number 4" in field 6 of the keyword.  

You can have answer forms that take more than one record, like
this one:
\n\fc
answerForm:{\\
BFVolEqu  !1,10!!2,10!!3,10!
!4,10!!5,10!!6,10!!7,10!!8,10!!9,10!!10,10!}
\f0\w

The field definition actually contains three values: the field number,
the field width, and an optional "helper" PKey.  The field number is
necessary to relate the place on the keyword with the graphical
element's answer.  The optional "helper" \bpkeY:PKey\b is used to
translate between an integer number answer, like a list selection
index number, and the value you really want.  Here is an example:
\n\fc
answerForm:{DelOTab   !1,10,numbers!}
numbers:{1 2 3}
\f0\w

The list of DelOTab tables contains 3 tables, but the keyword format
calls for the numeric values 1, 2, or 3 be entered not 0, 1, or 2.
So, we define an arbitrary helper PKey, in this case the word numbers.
Its \bpstrinG:PString\b contains some tokens.  If the first item in
the list of tables is selected (item 0), then the first token from the
numbers \bpstrinG:PString\b is used in the keyword.  In this case, the
tokens in the numbers \bpstrinG:PString\b are indeed numbers.  They
could have been any other tokens, species codes, for example!  And, we
could have used some other name for the PKey besides the name
numbers.  Furthermore, the tokens may be strings that contain blanks
(or a string of one or more blanks) by specifying the string using
quotation marks.  For example, if the answer should be a blank when
the first value is picked, you can code the following: 
\fcnumbers:{" " 2 3}\f0.

When parmsForm is present, and the user selects the PARMS feature,
then the result built by Suppose is based on the parmsForm rather than
the answerForm.  The rules governing parmsForm are the same as those
governing answerForm.  However, since the field width is often not
important when PARMS is used, many of the field definitions lack a
field width parameter.  Here is an example parmsForm for the BAIMult
keyword:
\n\fc
parmsForm:{* Args: Species, Multiplier
BAIMult    !1,10!   Parms(!2!, !3!)\\n}
\f0\w

Note the there is a sequence beginning with "* Args" and a list of the
arguments within PARMS is placed only as an FVS comment.  Lines that
begin with * in a FVS keyword file are comments.  So, this line is a
comment to FVS and a way to remind the Suppose users what the
arguments mean.

The date/cycle (or number of years after a condition is found true) is
the first field, which starts in column 11 and ends 10 columns later.
The second and third field definitions simply state where the
respective responses are placed within the PARMS function.  Note that
all spaces and other characters are in the resulting string built by
Suppose.  Note that the last character is a newline.  The string must
end with a new line because it is a keyword record.

When GPSB is used for purposes other than keywords, the answerForm
specified in the MSText is used using the same methods as defined for
keywords.  For example, here is an answerForm for a rule (the rule
tests on the percent of normal stocking, the user sets the percentage
using a sliderBox).
\n\fc
answerForm:{BTPA gt (!1,6!*.01)*(25000*BADBH+1.)**(-1.588)}
\f0\w

\fb!fvsbin! and other strings starting with !\f0

Sequences that start with \fc!\f0, where the first character following
the \fc!\f0 is not a number, are not field descriptors.  Suppose
transfers any such sequence to the answer.  The sequence is defined to
end when another \fc!\f0 character is found or when the end of the
line is found.  

After the answer is initially built, Suppose replaces \fc!fvsbin!\f0
sequences with the currently set value of the \fc-fvsbin\f0
command line argument. See 
\lcommandLine:Suppose Command Line Arguments\l for more information 
including the rules used to set the
value of \fc!fvsbin!\f0 when it is not specified on the Suppose
command line.

HTOPIC pFaCondLists "Conditions List" parameter event_monitor GPSB condition
\fbConditions List\f0

When users select scheduling by condition, rather than by year, a
list of predefined conditions is presented in a "condition
library".  This library is actually a list of elements from an
\bmstexT:MSText\b section called conditions_list.  Here is an example:
\n\fc
//start conditions_list

culmination:{Culmination of mean annual increment}
gtnormal:{Stocking above percentage of normal}
ltnormal:{Stocking under percentage of normal}
removal:{After "significant" harvesting/thinning}

//end   conditions_list
\f0\w

The \bpkeY:PKey\b is the abbreviated name for the condition and the
PString is the full name.  Only the full names are "seen" by
users.  The abbreviated name is case sensitive and is used to
find a MSText that fully describes the condition.  Each condition
MSName is formed by adding the abbreviation (from this list) to
the string condition.  For example, the MSName for the "removal"
rule is condition.removal.  

The GPSB facility of Suppose is used to build a screen that allows
users to set the parameters for the rule.  In addition to the PKeys
listed under \lpFaGPKeys:GPSB-PKeys\l, condition windows can have an 
additional PKey called \fcwaitYears\f0:

\fbwaitYears\f0
\i20.	Used to specify the default number of years before a condition
can be tested after being found true.

For example, for the rule "After "significant" harvesting/thinning",
the user is able to specify what is "significant" and what unit of
measure for removals is used.  Here is the MSText for the removal
rule:
\n\fc
//start condition.removal

description:
{A "significant" removal is when over a percentage of
trees, basal area, or other unit of trees have been
removed.  You specify the units of measure and the
percentage that must be removed to make a removal
"significant".}

f1title:
{Specify the units of measure to which the percentage is
applied.}
f1:{listButton Units of measure:}
f1v:
{Trees
>Basal area
 Total cubic volume
 Merch cubic volume
 Board feet}

f2:{sliderBox Percent removed}
f2v:{30 0 100 0 100}

answerForm:{!1,,afterVars! lt (!2,6!*.01) * !1,,beforeVars!}
beforeVars:{BTPA BBA BTCuFt BMCuFt BBdFt}
afterVars: {ATPA ABA ATCuFt AMCuFt ABdFt}

waitYears:0

//end  condition.removal
\w\f0

This rule takes two inputs: 1) the units of measure presented as
a list button, and 2) the percentage of said measurement that
must be removed to classify the condition.  The answerForm makes
interesting use of the field definition "helper" PKey.  The user
selects the measurement in the list button and this selection is
used twice in building the answer string.

HTOPIC pFaEventMonitor "Event Monitor Variables and Functions" parameter event_monitor GPSB condition
\fbEvent Monitor Variables and Functions\f0

Suppose supports the ability for the users to define their own
expressions.  The expressions that are part of the PARMS feature
and those that are part of the predefined conditions are starting points
for expressions that can be edited using the Suppose expression
editor.  When the expression editor is used, Suppose builds a
lists of variables, operators, functions and significant contents
that can be used in the expressions being edited.  The lists of
operators and the mathematical functions are built into Suppose.
Therefore, there are no entries in the parameters file for these
lists.

\fbVariables\f0

The variables list uses the \bpkeY:PKey\b to name the variable and the
\batlisT:ATList\b to label the variable as always defined, defined
only after thinning, or defined by one of the extensions.  When an
extension defines a variable, the extension abbreviation is used in
the ATList.

The lack of an \batlisT:ATList\b indicates the variable is always
defined.  The \bpstrinG:PString\b is used to provide a short
definition of the variable.

Here is a short example:
\n\fc
//start evmon.variables
Age:
         {Age at beginning of an FVS cycle}
Aspect:
         {Aspect in degrees}
BaDBH:
         {Before thin average DBH}
BBA:
         {Before thin basal area}

\f1many lines have been deleted for this example\fc

RMCuFt   {after}:
         {Removed merch cubic feet volume}
RTCuFt   {after}:
         {Removed total cubic feet volume}
//end  evmon.variables
\w\f0

\fbFunctions\f0

The FVS Function list is defined using nearly the same methods used to
define variables.  The \bpkeY:PKey\b is the function name and the
PString provides a description.  However, the \batlisT:ATList\b
designates when the function is defined, always or after, and in what
kinds of expressions it may be used.  All functions can be used in
Parms and in logical expressions.  When the \bppE:PPE\b is used, some PPE
expression can only use a limited set of these functions.  The word
target is used to designate when the function can be used in target
expressions, for example.

Here is an example FVS function list.
\n\fc
//start evmon.functions

ACCFSP   {after}:
{After thin CCF by species}

BCCFSP:
{Before thin CCF by species}

\f1many lines have been deleted for this example\fc

MaxIndex {always target}:
{Returns the argument index corresponding to the largest value}

//end  evmon.functions
\w\f0

\fbFunction Parameters\f0

Some of the Event Monitor functions take arguments that define the
function's operation.  For example, the BCCFSP function takes one
argument that is the species code for the corresponding species.  The
most important FVS function is the SpMcDBH function.  It takes up to 8
arguments.

The Suppose expression editor has a feature that allows you to "Set
Function Parameters".  When this feature is used, a scrolling window
appears that provides for setting the parameters.  This window uses
the \lpFaGPKey:GPSB\l

Each FVS function contains an MSText entry that defines the function
arguments using exactly the same scheme used to define keyword fields
on keywords.  The answerForm is the function with the arguments set.

Here is an example MSText section illustrating the used of the
GPSB facility with the DBHDist function:
\n\fc
//start evmon.function.DBHDist

f1:{listButton Attribute of the stand}
f1v:{\
Accreation
Mortality
>Trees per acre
Total cubic volume
Merch cubic volume
Board foot volume
Removed trees per acre
Removed total cubic volume
Removed merch cubic volume
Removed board foot volume
Residual trees per acre}

f2:{listButton Percentile point:}
f2v:{\
10-percentile
30-percentile
50-percentile
70-percentile
90-percentile
100-percentile
Total for attribute}

answerForm:
{DBHDist(!1,,list!,!2,,list!)}

list:{1 2 3 4 5 6 7 8 9 10 11 12}

//end   evmon.function.DBHDist
\w\f0

HTOPIC pFaTutorial "Tutorial Datasets" tutorial
\fbTutorial Datasets\f0

The data used in the tutorial are loaded from a \bmstexT:MSText\b
section called \f1tutorial\f0.

The PKey locationsFileContents is used to specify the contents
of a file that will be stored in the users current directory
as file \f1tutorial.loc\f0. 

The PKey tutorialFileList is used to specify the list of files
whose contents are defined by other PKeys that have the same
exact spelling as the file names in the list.

When the PKey is locationsFileContents or tutorialFileList, the
ATList may be a variant.  Otherwise, ATLists are NOT used.


HTOPIC pFaRunWizard "Run Wizard Tasks" run_wizard
\fbRun Wizard Tasks\f0

The data in the Run Wizard are loaded from a \bmstexT:MSText\b section called
runWizard.  There is one required \bpkeY:PKey\b called \fbtaskList\f0.
The PString is a list of tasks, each coded on a separate line.

For each task, there is a set of PKeys.  For the first task all the
PKeys start with t1, for the second, all start with t2, and so on, for
all tasks t1...tN, where N is the number of tasks.

Within each task, there are a set of steps, and the PKeys have step
names.  For example, t1s1 is the PKey for step 1 of task 1.  t1s2 is
the PKey for the second step, and so on for all steps t1s1...t1sN,
where N is the number of steps within a task.

Here is a partial listing of the MSText section illustrating the use
of the GPSB facility to build the Run Wizard data:
\n\fc
//start runWizard

taskList:{Single stand run, simple silviculture
Modify silviculture of single stand run}

t1s1:{Use the Select Simulation Stands button to access the tool used \\
to select stands.}

t1s2:{Use the "Add 1 Stand" button (after selecting one \\
stand) to add the stand to the simulation.  Close the Select \\
Simulation Stands window.}

t1s3:{Use the "Management Actions" button to access the available actions. \\
Select a category of actions, then a specific action."}

t2s1:{Use the File menu to open the existing run Simulation File.}

//end runWizard 
\w\f0

HTOPIC pFaMgmtActions "Management Actions MSText" management_actions GPSB
\fbManagement Actions MSText\f0

The \lCMNGWINWindow:Management Actions Window\l provides access to the
management actions users can include in simulations.  That window
provides for a list of management categories and within each category,
a list of actions.  When an action is selected, a corresponding window
is started that provides for creating a \bcomponenT:component\b for
that action.

There is a \bmstexT:MSText\b section called \f1mgmtCategories\f0 that
is used to define the categories, the actions within each category,
and the Suppose window used to build the component corresponding to
the action.

Each category is defined with a \bpkeY:PKey\b.  The first category is
defined with the PKey \f1c1\f0, the second with \f1c2\f0, and so on
for \f1c1...cN\f0, where \f1N\f0 is the number of categories.

A PKey can have an \batlisT:ATList\b defined as a set of
\bvarianT:variant\b identification codes.  

For a given PKey, the \bpstrinG:PString\b is used to define the name
of the category and its list of items.  The first line in the PString
is the category, the rest are management actions within the category.

Each management action line is has the following format: All
characters up to a semicolon are considered to be the name of the
management action.  The first token after the semicolon is the
identification of the FVS \bextenS:extension\b required for the action
to be simulated.  The second token after the semicolon is the
name of the Suppose method used to create the corresponding component.
If the second token is \lpFaGPKey:GPSB\l, then the third token is the
name of the MSText section used by the general purpose screen builder
for building the management action's window.

The only authoritative list of suppose methods used to create management
components is the Suppose source code.  A list that may be correct is
in the Suppose parameters file.

Here is an example:
\n\fc
//start mgmtCategories

c1:{\
Even-aged: Regeneration Harvesting
Clearcut; base ClearcutWin
Seedtree; base SeedTreeWin
One entry shelterwood; base Shelterwood1Win
Two entry shelterwood}

! Note that c2...c7 have been deleted for this example.

c8:{\
Fertilizer
Fertilize; base GPSB keyword.base.Fertiliz}

//end mgmtCategories  
\w\f0

HTOPIC PPESupporT "PPE Support" ppe
\fbParallel Processing Extension Support\f0

Suppose can build \bppE:PPE\b \bsimfilE:simulation files\b when the
PPE extension is being used.  These files differ from standard
simulation files in the following ways:

\i20.-	PPE-specific \bcomponenT:components\b (those that contain
PPE-specific \bkeywordS:keywords\b can be entered prior to any stand
level keywords. These keywords are grouped into a collection called
\f1PPE Top Components\f0. When they are present in the run, they are
identified as being in that collection in the 
\lEDITSimulationFile:Edit Simulation File\l window.

\i20.-	Stand-level keywords follow the PPE's \fcAddStand\f0
keyword. Suppose automatically generates this keyword and inserts it
between each stand in the simulation file.

\i20.-	Following all the stands, Suppose inserts \f1PPE Bottom
Components.\f0 These components contains PPE keywords that must (or
should) be placed between the last stand and the PPE's \fcProject\f0
keyword.

\i20.-	After the \fcProject\f0, Suppose inserts \f1PPE Report
Components.\f0 prior to the \f1Stop\f0 keyword.

The designation of PPE-keyword placement controled by the \f1ppe\f0 
\bpkeY:PKey\b (see \lpFaGPKeys:GPSB-PKeys\l) placed in the 
\bparameteR:parameters file\b. Use of a keyword with this designation
forces Suppose to pick a program that contains the PPE extension.

Suppose can read and edit PPE simulation files.  The 
\lEDITSimulationFile:Edit Simulation File\l window displayes the top,
bottom, and report components if they are present.

All the mechanisms that support \baddfilE:addfiles\b as described
under Type B records in the \llocationsFile:Locations File\l and Type
D records in the \lstandlistFile:Stand List Files\l are
functional. Components coded in those files that are are created using
Suppose as top, bottom, or report keywords are automatically added to
the run stream. Generally, however, it is not a good idea to include
PPE-level keyword components in \baddfilE:addfiles\b that referenced
in D records of Stand List Files.

FVS output files are the reports generated by FVS.  Suppose
can scan these files to produce \lGENERATEReports:reports\l and 
\lGENERATEGraphs:graphs\l of some of the data they contain. (This is
not true for runs produced by the PPE, see \lPPESupporT:PPE Support\l
for more information.

Suppose can not read output files produced when using the PPE for use
by the \lGENERATEReports:Generate Reports\l and 
\lGENERATEGraphs:Generate Graphs\l windows.  This remains a desired
feature. 

HTOPIC commandLine "Suppose Command Line Arguments" start_suppose command_line command locsfile parmsfile variant editor 
\fbSuppose Command Line Arguments\f0

Suppose can be started with specific arguments.  On Motif, the arguments
may include X resources; those arugments are not covered here.

The form of the Suppose start up command is:
\n\fc
suppose -locsfile=\f1LocationsFileName\fc
        -fvsbin=\f1DirectoryContainingFVSPrograms\fc
        -parmsfile=\f1ParametersFileName\fc
        -prefsfile=\f1PreferencesFileName\fc
        -PPE=\f1Yes|No\fc
        -defvariant=\f1variantAbbreviation\fc
        -variant=\f1variantAbbreviation\fc
        -editor=\f1nameOfEditor\fc
        -segcycle=\f1Yes|No\fc
        -processplots=\f1Yes|No\fc
        -postprocs=\f1PostProcessorFileName\fc
        -helpfile=\f1SupposeHelpFileName\fc
        -startrect=\f1top,bot,left,right\fc
        \f1simulationFileName\fc
\f0
Notes:

\w
\i20.-	The Suppose command should be on one line.

\i20.-	The order of the elements is not important except that the
\f1simulationFileName\f0 must be specified last.

\i20.-	All command line arguments are optional.  None are necessary.

\i20.-	No spaces are allowed before or after the equal signs (=).

\fc-locsfile=\f1LocationsFileName\f0

\i20.	Specify the name of the \llocationsFile:Locations File\l you 
wish to use.

\fc-fvsbin=\f1DirectoryContainingFVSPrograms\f0

\i20.	Specify the directory containing the FVS programs.  This
directory is used to define \fc!fvsbin!\f0 in shell scripts, batch
files, and keyword sequences created by Suppose.  If the string is not
defined using the \fc-fvsbin\f0 command line option, then it is
defined from the FVSBIN environment variable.  If FVSBIN is not
defined, then FVSHOME is tried.  On Win32 (only), if the string is
still not defined, then the directory where suppose.exe is stored is
used.

\fc-parmsfile=\f1ParametersFileName\f0

\i20.	Specify the name of the 
\lparametersFile:Parameters File\l you wish to use.

\fc-prefsfile=\f1PreferencesFileName\f0

\i20.	Not yet implemented.

\fc-PPE=\f1Yes|No\f0

\i20.	Code \f1Yes\f0 to start request that a PPE simulation file be
built.  If the run requires the PPE, a PPE simulation file is built
regardless of this value. \f1No\f0 is the default.

\fc-defvariant=\f1variantAbbreviation\f0

\i20.	Specify the abbreviation of the \lpFaVariants:variant\l you
consider the default.

\fc-variant=\f1variantAbbreviation\f0

\i20.	Specify the abbreviation of the \lpFaVariants:variant\l you \f1must\f0
use.

\fc-editor=\f1f1nameOfEditor\f0

\i20.	Specify the command used to run your editor.  For example, to
sepecify Emacs, you can code \fc-editor=emacs\f0, or for notePad (on 
Windows95), you can specify \fc-editor=notePad\f0.  The editor is used
to view outputs.  (The string defined with this value replaces 
\fc!editor!\f0 in shell scripts and batch files created by Suppose.)

\fc-segcycle=\f1Yes|No\f0

\i20.	Code \f1Yes\f0 to request that the first cycle be segmented into
10yr cycles, plus the remainder (i.e., an inventory in 1995 and a common
start year of 2007 results in an initial cycle of 12 years (if coded No)
or an initial 10-yr and 2-yr cycle (if coded Yes). \f1Yes\f0 is the default.

\fc-processplots=\f1Yes|No\f0

\i20.	Code \f1Yes\f0 to request that the FVS process plots in the FVS_PlotInit
table as stands (i.e., each plot is expanded and simulated as if it were a 1-acre
stand . \f1No\f0 is the default.

\fc-postprocs=\f1PostProcessorFileName\f0

\i20.	Not yet implemented.

\fc-helpfile=\f1SupposeHelpFileName\f0

\i20.	Specify the name of the Suppose help file you want to use.  You
must \f1not\f0 specify a suffix to this file.  The actual file
suffix of the file must be \fc.csc\f0.

\fc-startrect=\f1top,bot,left,right\f0

\i20.	Specify the starting rectangle of the task window (Windows
only, this option is ignored on Unix-based systems).  The values
are entered as percentages of the screen--negative numbers are
considered pixels rather than percentages.  The upper left corner is
location 0,0 and the lower right is 100,100 (percent).  

\i20.	For example, if you want Suppose to open in the right 2/3 of
the screen and fill from top to bottom, you'd code:

\i20.	\fc-startrect=0,100,33.333,100\f0

\f1simulationFileName\f0

\i20.	The name of an existing 
\bsimfilE:simulation file\b you want suppose to read.


