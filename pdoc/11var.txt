---------------------------------------------------------------------------
         Chapter 11--Variants, extensions, programs, and commands

                Date of Last Revision: September 24, 1998
---------------------------------------------------------------------------

Describes the objects used to support variant, program, and command
selection.

This part of Suppose is perhaps the most complicated part.  Here is the
idea.  As a user makes selections, like selecting one or more stands,
or a keyword that requires a specific extension, and so on, then
Suppose reacts by eliminating choices that conflict with the
choices already made.  For example, lets say the user picks a stand the
requires a specific variant and furthermore, that variant is part of
an FVS program be run that does not contain the Full Establishment
model.  Suppose will then eliminate the ability for the user to pick
keyword options that are only available through the Full Establishment
Model.  What if the reverse action is taken.  The user could pick a
keyword option that requires the Full Establishment model prior to
picking a stand.  Suppose will then eliminate the ability for the user
to pick stands that require variants linked to the Full Establishment
model.

Once choices are eliminated they can not be recovered.  To understand
this rule, consider again the Establishment example.  Say the user
realizes that using the Full Establishment Model keyword is
inconsistent with picking the desired stand.  A solution would be to
delete the keyword.  But, Suppose will still not allow the user to
pick the stand because Suppose does not have the ability to UNDO the
process of eliminating choices that conflict with the
choices already made.  The user must start over (using the New item of
the File menu). See the "Thoughts" below to see how this restriction
might be removed in the future.

This facility in Suppose is supported by a set of classes, member data
and member functions.  It is further supported by entries in the
Suppose parameter file.

---------------------------
Important parameter file data
---------------------------

When the user presses the "Run Simulation" button, Suppose must
determine what is going to be run.  It picks a "command" from a list
supplied in the MSText section called commands.  There are entries for
unix and dos (used for Win95).

Suppose must pick an FVS program.  It picks the first program listed in the
MSText section called programs that contains the desired variant and
the desired extensions.

Suppose knows the required extensions because it keeps a list of those
implied by the chooses made by the user.  Keywords and other options
in Suppose have a corresponding entry in the parameters file (or in
some cases, hard coded in Suppose), that tags the option as to the
required extension.  If no tag is present, then the base model is
required.  All FVS programs contain the base model.

Suppose knows the desired variant because it keeps track of the
preferred and acceptable variants for each stand in the simulation.
When a Keyword is included in the run (a keyword Component), it is
tagged with the variant being used.  This implies that the variant is
required for the run (see the section on thoughts, below).

Suppose knows the relationship between a variant abbreviation and a
full name because of the contents of the MSText section called
variants.  It knows the relationship between an extension abbreviation
and a full name because of the contents of the MSText section called
extensions.

---------------------------
Objects that hold the data
---------------------------

class SpCommands holds the list of commands and contains member
functions to select the needed command for the run.

class SpPrograms holds the list of programs and the member functions
to select the needed program.  For each program, the variant on which
it is based and the list of extensions it contains are provided.

class SpVariants holds the list of variants and the member functions
to update the list of legal variants from which the user, or Suppose,
may pick.

class SpExtensions holds the list of extensions and the member
functions to update the list of legal extensions from which the user,
or Suppose may pick.

Calls to the update functions are scattered through out the code as
necessary.  For some examples, see the code in selectsi.cpp
SelectSimStandWin::SpAcceptStandList() that signals that some specific
variant(s) are required NewStandVariantsInteraction() and the call to
AddExtensionInUse in function RunStream::AddComponent() found in file
runstr.cpp.

---------------------------
User interface to the data structure
---------------------------

SelectVariant:CWwindow (selvar.?pp) is an interface to the data structure.  It
displays the currently selected command, program, variant, and
extensions, and the lock status. It allows the user to make the
selections manually and to lock them if desired.  It illustrates the
calls to the functions that update the data.

---------------------------
Related files:
---------------------------

commands.?pp
programs.?pp
variants.?pp
extens.?pp
selvar.?pp

commands.prm
programs.prm
variants.prm
exten.prm

Also see the help files on the command line arguments.  Users can
specify required and default variants on the command line.

---------------------------
Thoughts:
---------------------------

1. This code is complicated, but I don't have a better approach.  I
think the capability for Suppose to have this feature is important and
should not be removed.

2. The ability to "reset" the selection of a command, program, variant
(or list of legal variants), and list of required extensions would be
a nice enhancement.  This would allow an "Unlock" feature to be
supported.  The approach in coding this kind of feature is to write
code that first resets the entire data structure (like a New), and then
processes through the simulation stands to update the listed of
required variants, then the components to update the list of required
extensions and variants.  This would allow a user to "delete" an
option and then attempt to clear restriction.

3. The program should be smarter about tagging keyword components as
requiring specific variants.  Initially, this tagging was done to keep
a user from using a keyword component that contains species, forests,
habitat, or other codes that are correct for one variant in a variant
to which those codes do not apply.  Yet many keywords are not variant
specific.  An enhancement would be to add a "variantSpecific" PKey to
the keyword entries in the parameters file and only tag keyword
components with a variant identification if the "variantSpecific" PKey
was present.

[the following has been done]
4. Just because a program is listed in the parms file does not insure
that it is available to the user on the machine being used.  Another
enhancement to Suppose would be for the program to attempt to "open"
the program file in hopes of finding out if it is present.  If it is
not present, then Suppose to try to find an alternative program that
has the required elements.  If none are found, then suppose would
issue a warning message and ask the user to "Cancel" or "Run anyway"
(where the Run Anyway would be useful in the case that the user knows
that the program will be found when the OS searches the path).






